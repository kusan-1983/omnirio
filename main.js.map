{"version":3,"sources":["./src/app/services/crud.service.ts","./src/environments/environment.ts","./src/app/editdialog/editdialog.component.ts","./src/app/editdialog/editdialog.component.html","./src/app/datatable/datatable.component.ts","./src/app/datatable/datatable.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n  url = 'http://dummy.restapiexample.com/api/v1/employees';\n  headers = new HttpHeaders()\n  .set('content-type', 'application/json')\n  .set('Access-Control-Allow-Origin', '*').set('Accept', 'application/json').set('Authorization', 'Bearer d12dd75666bd82ba2b5d3374e8e6b6c549f3bc4e15863f3696995c2011566488');\n\n  constructor(private http: HttpClient) { }\n\n  getTableData(): Observable<any>{\n    return this.http.get('https://gorest.co.in/public-api/users');\n  }\n  deleteByid(id): any{\n    return this.http.delete('https://gorest.co.in/public-api/users/' + id, { headers : this.headers } );\n  }\n\n  postData(uData, id){\n    return this.http.post('https://gorest.co.in/public-api/users' + id, uData, { headers : this.headers });\n  }\n  putData(uData, id){\n    return this.http.patch('https://gorest.co.in/public-api/users/' + id, uData, { headers : this.headers });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { CrudService } from '../services/crud.service';\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-editdialog',\n  templateUrl: './editdialog.component.html',\n  styleUrls: ['./editdialog.component.scss']\n})\nexport class EditdialogComponent implements OnInit {\n  editData: EditData;\n  id: number;\n  constructor( private crudService: CrudService, public dialogRef: MatDialogRef<EditdialogComponent>,\n    // tslint:disable-next-line:align\n    @Inject(MAT_DIALOG_DATA) public data: EditData) {}\n\n    ngOnInit(): void {\n      console.log(this.data);\n      this.id = this.data.id;\n      this.editData = this.data;\n    }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  submit(v): void {\n    console.log(v.value);\n    this.crudService.postData(v.value, this.id).subscribe(data => {\n      console.log(data);\n      this.dialogRef.close();\n    });\n  }\n}\n\nexport interface EditData {\n  id: number;\n  name: string;\n  email: string;\n  gender: string;\n  status: string;\n  created_at: string;\n}","<h2 mat-dialog-title>Edit : {{data.name}}</h2>\n<form #editForm=\"ngForm\" (ngSubmit)=\"submit(editForm)\">\n    <mat-dialog-content class=\"mat-typography\">\n        <mat-form-field>\n            <mat-label>name</mat-label>\n            <input matInput [(ngModel)]=\"editData.name\" name=\"name\">\n        </mat-form-field>\n        <mat-form-field>\n            <mat-label>name</mat-label>\n            <input matInput [(ngModel)]=\"editData.email\" name=\"email\">\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\">\n            <mat-label>Status</mat-label>\n            <select matNativeControl required [(ngModel)]=\"editData.status\" name=\"status\">\n              <option value=\"Active\">Active</option>\n              <option value=\"Inactive\">\tInactive</option>\n            </select>\n        </mat-form-field>\n\n        <mat-radio-group class=\"example-radio-group\" name=\"gender\" [(ngModel)]=\"editData.gender\" >\n            <mat-radio-button class=\"example-radio-button\" value=\"Male\">Male</mat-radio-button>\n            <mat-radio-button class=\"example-radio-button\"  value=\"Female\">Female</mat-radio-button>\n        </mat-radio-group>\n\n    </mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n    <button type=\"button\" mat-dialog-close class=\"btn btn-mute\">Cancel</button>\n    <button  class=\"btn btn-primary\">Update</button>\n    </mat-dialog-actions>\n</form>\n","import { Component, OnInit, ViewChild, AfterViewInit, Inject } from '@angular/core';\nimport {MatTableDataSource} from '@angular/material/table';\nimport { EditdialogComponent } from '../editdialog/editdialog.component';\nimport { CrudService } from '../services/crud.service';\nimport {MatDialog} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-datatable',\n  templateUrl: './datatable.component.html',\n  styleUrls: ['./datatable.component.scss']\n})\nexport class DatatableComponent implements OnInit {\n   data: any;\n   animal: string;\n   name: string;\n\n  constructor(private crudService: CrudService, public dialog: MatDialog) { }\n  displayedColumns: string[] = ['id', 'name', 'email', 'gender', 'status', 'action'];\n  dataSource = new MatTableDataSource<PeriodicElement>(ELEMENT_DATA);\n\n\n  ngOnInit(): void {\n    //this.dataSource.paginator = this.paginator;\n    this.crudService.getTableData().subscribe(data => {\n      console.log(data);\n      this.dataSource  = data.data;\n    });\n\n  }\n\n  deleteRow(id: any): void{\n    console.log(id);\n    this.crudService.deleteByid(id).subscribe(data => {\n      console.log(data);\n      this.crudService.getTableData().subscribe(datas => {\n        this.dataSource = new MatTableDataSource<PeriodicElement>(datas.data);\n      });\n    });\n  }\n\n\n  openDialog(element): void {\n    const dialogRef = this.dialog.open(EditdialogComponent, {\n      width: '450px',\n      data: element\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.animal = result;\n      this.crudService.getTableData().subscribe(data => {\n        console.log(data);\n        this.dataSource  = data.data;\n      });\n    });\n  }\n\n}\n\n\nexport interface PeriodicElement {\n  id: number;\n  name: string;\n  email: string;\n  gender: string;\n  status: string;\n  created_at: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [];\n","\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n    <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n  \n    <!-- Position Column -->\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef> No. </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n    </ng-container>\n  \n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n    </ng-container>\n  \n    <!-- Weight Column -->\n    <ng-container matColumnDef=\"email\">\n      <th mat-header-cell *matHeaderCellDef> Email </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\n    </ng-container>\n  \n    <!-- Symbol Column -->\n    <ng-container matColumnDef=\"gender\">\n      <th mat-header-cell *matHeaderCellDef> Gender </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.gender}} </td>\n    </ng-container>\n    <ng-container matColumnDef=\"status\">\n        <th mat-header-cell *matHeaderCellDef> Status </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.status}} </td>\n    </ng-container>\n    <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef> Action </th>\n        <td mat-cell *matCellDef=\"let element\">\n            <button class=\"btn btn-outline-primary\" (click)=openDialog(element)>Edit</button>\n            <button class=\"btn btn-outline-danger\" (click)=\"deleteRow(element.id)\">Delete</button>\n        </td>\n    </ng-container>\n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n","import { Component} from '@angular/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'crud-app';\n}\n","<mat-toolbar color=\"primary\">\n  <span>CRUD - APP</span>\n  <span class=\"example-spacer\"></span>\n</mat-toolbar>\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTableModule} from '@angular/material/table';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { DatatableComponent} from './datatable/datatable.component';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatRadioModule} from '@angular/material/radio'\nimport { EditdialogComponent } from './editdialog/editdialog.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DatatableComponent,\n    EditdialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatTableModule,\n    MatPaginatorModule,\n    HttpClientModule,\n    MatDialogModule,\n    MatInputModule,\n    FormsModule,\n    MatRadioModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  entryComponents: [EditdialogComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DatatableComponent } from './datatable/datatable.component';\n\nconst routes: Routes = [\n  { path: '', component: DatatableComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}